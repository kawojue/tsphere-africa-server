datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URI")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    email               String               @unique
    username            String               @unique
    firstname           String
    lastname            String
    password            String
    skill               String
    userStatus          UserStatus           @default(active)
    skills              Skill[]
    skillAttachments    File[]
    under18Kyc          under18Kyc?
    avatar              File?
    portfolio           Portfolio?
    email_verified      Boolean              @default(false)
    role                Role                 @default(user)
    under18             Boolean
    creative            Creative?
    talent              Talent?
    bankDetails         BankDetails?
    experiences         Experience[]
    rateAndAvailability RateAndAvailability?
    subscribed          Boolean              @default(false)
    createdAt           DateTime             @default(now())
    validation          Validation?
    jobs                Job[]
    jobApplications     JobApplication[]
}

model SubscribedEmails {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    email String @unique
}

model Contact {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    email       String
    fullname    String
    messageBody String
    replied     Boolean   @default(false)
    sentAt      DateTime  @default(now())
    repliedAt   DateTime?
}

model under18Kyc {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    issuingCountry String
    images         File[]
    user           User   @relation(fields: [userId], references: [id])
    userId         String @unique @db.ObjectId
}

model Admin {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    fullName String
    password String
    email    String @unique
    role     Role   @default(admin)
    job      Job[]
}

model Validation {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    token        String   @unique
    token_expiry DateTime
    randomCode   String
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @unique @db.ObjectId
}

model Portfolio {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    video  File?
    images File[]
    audio  File?
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.ObjectId
}

model BankDetails {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    bankName      String
    accountName   String
    accountNumber String
    sortCode      String?
    user          User    @relation(fields: [userId], references: [id])
    userId        String  @unique @db.ObjectId
}

model Experience {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    yearsOfExperience String
    proficiencyLevel  String
    brandsWorkedWith  String?
    projectType       String?
    roleOrPosition    String?
    projectDuration   String?
    user              User    @relation(fields: [userId], references: [id])
    userId            String  @unique @db.ObjectId
}

model RateAndAvailability {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    availability Boolean    @default(true)
    chargeTime   ChargeTime
    charge       Float
    weekdays     String[]
    user         User       @relation(fields: [userId], references: [id])
    userId       String     @unique @db.ObjectId
}

model Skill {
    id                String      @id @default(auto()) @map("_id") @db.ObjectId
    category          String
    subSkills         String[]
    yearsOfExperience String
    chargeTime        ChargeTime?
    charge            Float?
    user              User        @relation(fields: [userId], references: [id])
    userId            String      @unique @db.ObjectId
}

model Creative {
    id             String                  @id @default(auto()) @map("_id") @db.ObjectId
    bio            String?
    personalInfo   CreativePersonalInfo?
    certifications CreativeCertification[]
    user           User                    @relation(references: [id], fields: [userId])
    userId         String                  @unique @db.ObjectId
}

model CreativePersonalInfo {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    phone      String?
    altPhone   String?
    gender     Gender?
    religion   String?
    dob        String?
    country    String?
    localGovt  String?
    state      String?
    address    String?
    idType     String?
    proofOfId  File?
    languages  String[]
    fbHandle   String?
    igHandle   String?
    xHandle    String?
    creative   Creative @relation(fields: [creativeId], references: [id])
    creativeId String   @unique @db.ObjectId
}

model CreativeCertification {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    school     String
    startDate  String
    endDate    String
    study      String
    level      String?
    level_type String?
    creative   Creative @relation(fields: [creativeId], references: [id])
    creativeId String   @unique @db.ObjectId
}

model Talent {
    id           String              @id @default(auto()) @map("_id") @db.ObjectId
    personalInfo TalentPersonalInfo?
    bioStats     talentBioStats?
    user         User                @relation(fields: [userId], references: [id])
    userId       String              @unique @db.ObjectId
}

model TalentPersonalInfo {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    phone         String?
    altPhone      String?
    gender        Gender?
    religion      String?
    dob           String?
    playingMaxAge String?
    playingMinAge String?
    nationality   String?
    workingTitle  String?
    localGovt     String?
    country       String?
    state         String?
    address       String?
    idType        String
    proofOfId     File?
    languages     String[]
    fbHandle      String?
    igHandle      String?
    xHandle       String?
    talent        Talent   @relation(fields: [talentId], references: [id])
    talentId      String   @unique @db.ObjectId
}

model talentBioStats {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    bio       String?
    height    String?
    weight    String?
    hairColor String?
    eyeColor  String?
    gender    Gender?
    burst     String?
    hips      String?
    waist     String?
    dressSize String?
    talent    Talent  @relation(fields: [talentId], references: [id])
    talentId  String  @unique @db.ObjectId
}

model Job {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    type            String
    title           String
    role            String
    playingAge      String?
    description     String
    duration        DateTime?
    app_deadline    DateTime
    requirement     String
    location        String
    experience      String
    gender          Gender?
    rate            String?
    attachments     File[]
    status          JobStatus
    postedAt        DateTime         @default(now())
    approvedAt      DateTime?
    jobApplications JobApplication[]
    admin           Admin?           @relation(fields: [adminId], references: [id])
    user            User?            @relation(fields: [userId], references: [id])
    adminId         String?          @unique @db.ObjectId
    userId          String?          @unique @db.ObjectId
}

model JobApplication {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    status    ApplicantStatus @default(PENDING)
    appliedAt DateTime        @default(now())
    job       Job             @relation(fields: [jobId], references: [id])
    user      User            @relation(fields: [userId], references: [id])
    jobId     String          @db.ObjectId
    userId    String          @db.ObjectId

    @@unique([userId, jobId])
}

enum ApplicantStatus {
    HIRED
    PENDING
    REJECTED
}

enum Gender {
    Male
    Female
}

enum ChargeTime {
    Daily
    Weekly
    Monthly
}

type File {
    idx  String? @default(uuid())
    url  String
    path String
    type String?
}

enum JobStatus {
    PENDING
    APPROVED
}

enum Role {
    user
    admin
    talent
    creative
    client
}

enum UserStatus {
    active
    suspended
}

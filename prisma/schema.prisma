datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URI")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id               String       @id @default(auto()) @map("_id") @db.ObjectId
    email            String       @unique
    username         String       @unique
    firstname        String
    lastname         String
    password         String
    skill            String
    skills           Skill[]
    skillAttachments File[]
    under18Kyc       under18Kyc?
    avatar           File?
    portfolio        Portfolio?
    email_verified   Boolean      @default(false)
    role             Role         @default(user)
    under18          Boolean
    creative         Creative?
    talent           Talent?
    bankDetails      BankDetails?
    experiences      Experience[]
    subscribed       Boolean      @default(false)
    createdAt        DateTime     @default(now())
    validation       Validation?
}

model SubscribedEmails {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    email String @unique
}

model under18Kyc {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    issuingCountry String
    images         File[]
    user           User   @relation(fields: [userId], references: [id])
    userId         String @unique @db.ObjectId
}

model Admin {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    fullName String
    password String
    email    String @unique
    role     Role   @default(admin)
}

model Validation {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    token        String   @unique
    token_expiry DateTime
    randomCode   String
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @unique @db.ObjectId
}

model Portfolio {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    video  File?
    images File[]
    audio  File?
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.ObjectId
}

model BankDetails {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    bankName      String
    accountName   String
    accountNumber String
    sortCode      String?
    user          User    @relation(fields: [userId], references: [id])
    userId        String  @unique @db.ObjectId
}

model Experience {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    yearsOfExperience String
    proficiencyLevel  String
    brandsWorkedWith  String?
    projectType       String?
    roleOrPosition    String?
    projectDuration   String?
    user              User    @relation(fields: [userId], references: [id])
    userId            String  @unique @db.ObjectId
}

model Skill {
    id                String      @id @default(auto()) @map("_id") @db.ObjectId
    category          String
    subSkills         String[]
    yearsOfExperience String
    chargeTime        ChargeTime?
    charge            Float?
    user              User        @relation(fields: [userId], references: [id])
    userId            String      @unique @db.ObjectId
}

model Creative {
    id                   String                        @id @default(auto()) @map("_id") @db.ObjectId
    bio                  String?
    personalInfo         CreativePersonalInfo?
    ratesAndAvailability creativeRatesAndAvailability?
    user                 User                          @relation(references: [id], fields: [userId])
    userId               String                        @unique @db.ObjectId
}

model CreativePersonalInfo {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    phone      String?
    altPhone   String?
    gender     Gender?
    religion   String?
    dob        DateTime?
    country    String?
    state      String?
    address    String?
    idType     String?
    proofOfId  File?
    language   String?
    fbHandle   String?
    igHandle   String?
    xHandle    String?
    creative   Creative  @relation(fields: [creativeId], references: [id])
    creativeId String    @unique @db.ObjectId
}

model creativeRatesAndAvailability {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    availability Boolean  @default(true)
    charge       Float
    from         Weekday
    to           Weekday
    creative     Creative @relation(fields: [creativeId], references: [id])
    creativeId   String   @unique @db.ObjectId
}

model Talent {
    id                   String                      @id @default(auto()) @map("_id") @db.ObjectId
    personalInfo         TalentPersonalInfo?
    bio                  TalentBio?
    ratesAndAvailability TalentRatesAndAvailability?
    user                 User                        @relation(fields: [userId], references: [id])
    userId               String                      @unique @db.ObjectId
}

model TalentPersonalInfo {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    phone        String?
    altPhone     String?
    gender       Gender?
    religion     String?
    dob          String?
    playingAge   String?
    nationality  String?
    workingTitle String?
    country      String?
    state        String?
    address      String?
    idType       String
    proofOfId    File?
    language     String?
    fbHandle     String?
    igHandle     String?
    xHandle      String?
    talent       Talent  @relation(fields: [talentId], references: [id])
    talentId     String  @unique @db.ObjectId
}

model TalentBio {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    bio       String?
    height    String?
    weight    String?
    bloodType String?
    hairColor String?
    eyeColor  String?
    gender    Gender?
    burst     String?
    hips      String?
    waist     String?
    dressSize String?
    talent    Talent  @relation(fields: [talentId], references: [id])
    talentId  String  @unique @db.ObjectId
}

model TalentRatesAndAvailability {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    availability Boolean    @default(true)
    chargeTime   ChargeTime
    charge       Float
    from         Weekday
    to           Weekday
    talent       Talent     @relation(fields: [talentId], references: [id])
    talentId     String     @unique @db.ObjectId
}

enum Gender {
    Male
    Female
}

enum ChargeTime {
    Daily
    Weekly
    Monthly
}

enum Weekday {
    Sunday
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
}

type File {
    idx  String? @default(uuid())
    url  String
    path String
    type String?
}

enum Role {
    user
    admin
    talent
    creative
    client
}

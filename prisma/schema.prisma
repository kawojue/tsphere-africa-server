datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URI")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    email               String               @unique
    username            String               @unique
    firstname           String
    lastname            String
    password            String
    primarySkill        String?
    userStatus          UserStatus           @default(active)
    email_verified      Boolean              @default(false)
    verified            Boolean              @default(false)
    role                Role
    subscribed          Boolean              @default(false)
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    totp                Totp?
    avatar              File?
    wallet              Wallet?
    client              Client?
    talent              Talent?
    creative            Creative?
    referral            Referral?
    portfolio           Portfolio?
    validation          Validation?
    rateAndAvailability RateAndAvailability?
    jobs                Job[]
    likes               Like[]
    skillAttachments    File[]
    skills              Skill[]
    raters              Rating[]             @relation("RaterUser")
    ratings             Rating[]             @relation("TargetUser")
    contracts           Contract[]
    comments            Comment[]
    articles            Article[]
    referred            Referred[]
    txHistories         TxHistory[]
    experiences         Experience[]
    bankDetails         BankDetails[]
    jobApplications     JobApplication[]
}

model Referral {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    points    Int        @default(0)
    key       String     @unique
    referred  Referred[]
    user      User       @relation(references: [id], fields: [userId])
    userId    String     @unique @db.ObjectId
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Referred {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime @default(now())
    referral   Referral @relation(fields: [referralId], references: [id])
    referralId String   @db.ObjectId
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @db.ObjectId
}

model Wallet {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    balance             Float     @default(0.00)
    lastAmountWithdrawn Float     @default(0.00)
    lastAmountDeposited Float     @default(0.00)
    lastWithdrewAt      DateTime?
    lastDepoistedAt     DateTime?
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    user                User      @relation(fields: [userId], references: [id])
    userId              String    @unique @db.ObjectId
}

model Recipient {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    domain             String
    recipient_id       Int
    recipient_code     String   @unique
    integration        Int
    type               String?  @default("nuban")
    bank_code          String
    bank_name          String
    account_name       String
    account_number     String
    authorization_code String?
    createdAt          DateTime @default(now())
    updatedAt          DateTime
}

model TxHistory {
    id                       String   @id @default(auto()) @map("_id") @db.ObjectId
    reference                String   @unique
    amount                   Float    @default(0.00)
    settlementAmount         Float    @default(0.00)
    status                   TxStatus
    totalFee                 Float?
    paystackFee              Float?
    processingFee            Float?
    channel                  String?
    type                     TxType
    source                   String?
    narration                String?
    authorization_code       String?
    destinationAccountName   String?
    destinationAccountNumber String?
    destinationBankCode      String?
    destinationBankName      String?
    sourceAccountName        String?
    sourceAccountNumber      String?
    sourceBankCode           String?
    sourceBankName           String?
    description              String?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    user                     User     @relation(references: [id], fields: [userId])
    userId                   String   @unique @db.ObjectId
}

model SubscribedEmails {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    email String @unique
}

model Contact {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    email       String
    fullname    String
    messageBody String
    replied     Boolean   @default(false)
    sentAt      DateTime  @default(now())
    repliedAt   DateTime?
}

model Admin {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    fullName String
    password String
    email    String    @unique
    role     Role      @default(admin)
    job      Job[]
    articles Article[]
}

model Validation {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    token        String   @unique
    token_expiry DateTime
    randomCode   String
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @unique @db.ObjectId
}

model Totp {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    otp        String
    otp_expiry DateTime
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @unique @db.ObjectId
}

model Portfolio {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    video  File?
    audio  File?
    images File[]
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.ObjectId
}

model BankDetails {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    bankName      String
    accountName   String
    accountNumber String
    bankCode      String
    primary       Boolean  @default(false)
    updatedAt     DateTime @updatedAt
    createdAt     DateTime @default(now())
    user          User     @relation(fields: [userId], references: [id])
    userId        String   @unique @db.ObjectId
}

model Experience {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    yearsOfExperience String
    proficiencyLevel  String
    brandsWorkedWith  String?
    projectType       String?
    roleOrPosition    String?
    projectDuration   String?
    user              User    @relation(fields: [userId], references: [id])
    userId            String  @unique @db.ObjectId
}

model RateAndAvailability {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    availability Boolean    @default(true)
    chargeTime   ChargeTime
    charge       Float
    weekdays     String[]
    user         User       @relation(fields: [userId], references: [id])
    userId       String     @unique @db.ObjectId
}

model Skill {
    id                String      @id @default(auto()) @map("_id") @db.ObjectId
    category          String
    subSkills         String[]
    yearsOfExperience String
    chargeTime        ChargeTime?
    charge            Float?
    user              User        @relation(fields: [userId], references: [id])
    userId            String      @unique @db.ObjectId
}

model Creative {
    id             String                  @id @default(auto()) @map("_id") @db.ObjectId
    bio            String?
    personalInfo   CreativePersonalInfo?
    certifications CreativeCertification[]
    user           User                    @relation(references: [id], fields: [userId])
    userId         String                  @unique @db.ObjectId
}

model CreativePersonalInfo {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    proofOfId  File?
    phone      String?
    altPhone   String?
    gender     Gender?
    religion   String?
    dob        String?
    country    String?
    localGovt  String?
    state      String?
    address    String?
    idType     String?
    languages  String[]
    fbHandle   String?
    igHandle   String?
    xHandle    String?
    creative   Creative @relation(fields: [creativeId], references: [id])
    creativeId String   @unique @db.ObjectId
}

model CreativeCertification {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    school     String
    startDate  String
    endDate    String
    study      String
    level      String?
    level_type String?
    creative   Creative @relation(fields: [creativeId], references: [id])
    creativeId String   @unique @db.ObjectId
}

model Client {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    brief_forms BriefForm[]
    user        User        @relation(fields: [userId], references: [id])
    userId      String      @unique @db.ObjectId
}

model Talent {
    id           String              @id @default(auto()) @map("_id") @db.ObjectId
    personalInfo TalentPersonalInfo?
    bioStats     talentBioStats?
    user         User                @relation(fields: [userId], references: [id])
    userId       String              @unique @db.ObjectId
}

model TalentPersonalInfo {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    phone         String?
    altPhone      String?
    gender        Gender?
    religion      String?
    dob           String?
    playingMaxAge String?
    playingMinAge String?
    nationality   String?
    workingTitle  String?
    localGovt     String?
    country       String?
    state         String?
    address       String?
    idType        String
    proofOfId     File?
    languages     String[]
    fbHandle      String?
    igHandle      String?
    xHandle       String?
    talent        Talent   @relation(fields: [talentId], references: [id])
    talentId      String   @unique @db.ObjectId
}

model talentBioStats {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    bio       String?
    height    String?
    weight    String?
    hairColor String?
    eyeColor  String?
    gender    Gender?
    burst     String?
    hips      String?
    waist     String?
    dressSize String?
    talent    Talent  @relation(fields: [talentId], references: [id])
    talentId  String  @unique @db.ObjectId
}

model Job {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    type            String
    title           String
    role            String
    playingAge      String?
    description     String
    duration        DateTime?
    app_deadline    DateTime
    requirement     String
    location        String
    experience      String
    gender          Gender?
    rate            String?
    attachments     File[]
    status          JobStatus
    postedAt        DateTime         @default(now())
    approvedAt      DateTime?
    jobApplications JobApplication[]
    admin           Admin?           @relation(fields: [adminId], references: [id])
    user            User?            @relation(fields: [userId], references: [id])
    adminId         String?          @unique @db.ObjectId
    userId          String?          @unique @db.ObjectId
}

model JobApplication {
    id           String          @id @default(auto()) @map("_id") @db.ObjectId
    attachments  File[]
    cover_letter String?
    status       ApplicantStatus @default(PENDING)
    appliedAt    DateTime        @default(now())
    job          Job             @relation(fields: [jobId], references: [id])
    user         User            @relation(fields: [userId], references: [id])
    jobId        String          @db.ObjectId
    userId       String          @db.ObjectId

    @@unique([userId, jobId])
}

model Article {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    content          String
    coverPhoto       File
    title            String
    category         String
    views            Int       @default(0)
    shares           Int       @default(0)
    readingTime      String
    pending_approval Boolean   @default(true)
    publishedAt      DateTime  @default(now())
    approvedAt       DateTime?
    likes            Like[]
    comments         Comment[]
    author           User?     @relation(fields: [authorId], references: [id])
    authorId         String?   @unique @db.ObjectId
    admin            Admin?    @relation(fields: [adminId], references: [id])
    adminId          String?   @db.ObjectId
}

model Comment {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    content     String
    commentedAt DateTime @default(now())
    article     Article  @relation(fields: [articleId], references: [id])
    articleId   String   @db.ObjectId
    user        User?    @relation(references: [id], fields: [userId])
    userId      String?  @db.ObjectId

    @@unique([userId, articleId])
}

model Like {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    likedAt   DateTime @default(now())
    article   Article  @relation(fields: [articleId], references: [id])
    articleId String   @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?  @db.ObjectId

    @@unique([userId, articleId])
}

model BriefForm {
    id                   String        @id @default(auto()) @map("_id") @db.ObjectId
    status               ProjectStatus @default(PENDING)
    title                String
    type                 String
    category             String
    description          String?
    videos               File[]
    images               File[]
    docs                 File[]
    role_name            String?
    role_type            String?
    gender               Gender?
    age                  String?
    nationality          String?
    willing_to_pay       YesOrNo?
    duration             String?
    rate_type            ChargeTime?
    compensation         String?
    shoot_date           DateTime?
    shoot_time           DateTime?
    shoot_address        String?
    shoot_info           String?
    audition_date        DateTime?
    audition_time        DateTime?
    audition_options     String?
    audition_type        String?
    venue                String?
    city                 String?
    state                String?
    audition_address     String?
    pre_screen           YesOrNo?
    audition_instruction String?
    brief_date_expiry    DateTime?
    brief_time_expiry    DateTime?
    projectType          ProjectType
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt
    client               Client        @relation(fields: [clientId], references: [id])
    clientId             String        @unique @db.ObjectId
}

model Rating {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    point        Float
    review       String
    target       User     @relation("TargetUser", fields: [targetUserId], references: [id])
    targetUserId String   @db.ObjectId
    rater        User     @relation("RaterUser", fields: [raterUserId], references: [id])
    raterUserId  String   @db.ObjectId
    createdAt    DateTime @default(now())
}

model Contract {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    status    ContractStatus?
    signed    Boolean         @default(false)
    content   File?
    signature File?

    user   User   @relation(fields: [userId], references: [id])
    userId String @db.ObjectId
}

enum ApplicantStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum Gender {
    Male
    Female
}

enum ChargeTime {
    Daily
    Weekly
    Monthly
}

enum TxType {
    DEPOSIT
    WITHDRAWAL
}

enum TxStatus {
    FAILED
    PENDING
    SUCCESS
    REVERSED
}

enum ContractStatus {
    DECLINED
    ACCEPTED
}

enum JobStatus {
    PENDING
    APPROVED
}

enum Role {
    admin
    talent
    client
    creative
}

enum UserStatus {
    active
    suspended
}

enum YesOrNo {
    Yes
    No
}

enum ProjectType {
    doc
    fill
}

enum ProjectStatus {
    ONHOLD
    PENDING
    ONGOING
    CANCELLED
    COMPLETED
}

type File {
    idx  String? @default(uuid())
    url  String
    path String
    type String?
}
